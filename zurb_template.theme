<?php

/**
 * @file
 * Functions to support theming in the zurb_template theme.
 */

use Drupal\node\Entity\Node;
use Drupal\block\Entity\Block;
use Drupal\node\NodeInterface;
use Drupal\Core\Link;

/**
 * Load template files
 */
require_once('inc/elements.inc');
require_once('inc/form.inc');
require_once('inc/menu.inc');
require_once('inc/theme.inc');

/**
 * Implements hook_preprocess_breadcrumb().
 *
 * Adds the "title" variable so that the current page can be added as a breadcrumb.
 */
function zurb_template_preprocess_breadcrumb(&$variables) {
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

  $variables['title'] = $title;
}

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function zurb_template_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}

/**
 * Implements hook_page_attachments_alter().
 */
function zurb_template_page_attachments_alter(array &$page) {
  // Force IE to use Chrome Frame if installed.
  $page['#attached']['html_head'][] = array(array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'content' => 'ie=edge, chrome=1',
      'http-equiv' => 'x-ua-compatible',
    ),
  ), 'chrome_frame');

  // Remove image toolbar in IE.
  $page['#attached']['html_head'][] = array(array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'http-equiv' => 'ImageToolbar',
      'content' => 'false',
    ),
  ), 'ie_image_toolbar');
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function zurb_template_preprocess_page(array &$variables) {
  // Pass Top Bar value from theme settings to page.html.twig for rendering.
  $top_bar = theme_get_setting('zurb_template_top_bar_enable');

  if (!empty($top_bar)) {
    $main_menu_block = Block::load('zurb_template_main_menu');
    $main_menu_block_content = \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($main_menu_block);
    $variables['top_bar'] = $main_menu_block_content;
  }

  // Create / Pass Variables for static header to page.html.twig templates.
  $site_name = isset($variables['site_name']) ? $variables['site_name'] : \Drupal::config('system.site')->get('name');
  $logo = theme_get_setting('logo.url');

  if (!empty($logo)) {
    $elements = array(
      '#theme' => 'image',
      '#uri' => $logo,
      '#attributes' => array(
        'alt' => strip_tags($site_name) . ' ' . t('logo'),
        'title' => strip_tags($site_name) . ' ' . t('Home'),
        'class' => array('logo'),
      )
    );

    $variables['logo_img'] = $elements;
  }

  $title = strip_tags($site_name) . ' ' . t('Home');
  $url = \Drupal\Core\Url::fromRoute('<front>');
  $url->setOption('attributes', array('title' => $title));

  if (theme_get_setting('zurb_template_page_site_logo')) {
    $variables['linked_logo'] = '';
    if (!empty($variables['logo_img'])) {
      $variables['linked_logo'] = Link::fromTextAndUrl($variables['logo_img'], $url)->toString();
    }
  }

  if (theme_get_setting('zurb_template_page_site_name')) {
    $variables['linked_site_name'] = '';
    if (!empty($site_name)) {
      $variables['linked_site_name'] = Link::fromTextAndUrl($site_name, $url)->toString();
    }
  }

  // Make sure site_name is always set, in case there's only a default.
  $variables['site_name'] = $site_name;

  // Variable to disable hard-coded login elements.
  $variables['show_account_info'] = theme_get_setting('zurb_template_page_account_info');

}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function zurb_template_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    // When viewing a revision $node will be numeric.
    // @see https://www.drupal.org/node/2495703
    if (is_numeric($node)) {
      $node = Node::load($node);
    }
    if ($node instanceof NodeInterface) {
      array_splice($suggestions, 1, 0, 'page__node__' . $node->bundle());
    }
  }
}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function zurb_template_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function zurb_template_preprocess_block(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function zurb_template_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function zurb_template_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function zurb_template_preprocess_node(array &$variables) {
  // Add node--node_type--view_mode.html.twig suggestions
  $variables['theme_hook_suggestions'][] = 'node__' . $variables['elements']['#node']->bundle() . '__' . $variables['view_mode'];

  // Add node--view_mode.html.twig suggestions
  $variables['theme_hook_suggestions'][] = 'node__' . $variables['view_mode'];

  // Add a class for the view mode.
  if (!$variables['teaser']) {
    $variables['content_attributes']['class'][] = 'view-mode-' . $variables['view_mode'];
  }

  $variables['title_attributes']['class'][] = 'node-title';
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function zurb_template_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function zurb_template_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function zurb_template_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function zurb_template_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function zurb_template_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function zurb_template_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}
